
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/stopsign.obj",
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/stopsign.mtl");

// Get the lamp
const lamp = new Model(
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/lamp.obj",
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/lamp.mtl");

// Get the car
const car = new Model(
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/car.obj",
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/car.mtl");

// Get the street
const street = new Model(
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/street.obj",
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/street.mtl");

// Get the bunny (you will not need this one until Part II)
const bunny = new Model(
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/bunny.obj",
    "https://web.cs.wpi.edu/~jmcuneo/cs4731/project3/bunny.mtl");


var canvas;
var gl;
var program;


var vertices = [];
var normals = [];
var texCoords = [];
var material = [];


function main() {
    setUpWebgl();
    setUpModelViewMatrix();
    setUpLighting();
    setUpProjectionMatrix();
    parseModel(stopSign);
    clearCanvas();
    loadObject();
}


function setUpWebgl() {
    canvas = document.getElementById('webgl');
    gl = WebGLUtils.setupWebGL(canvas, undefined);
    if (!gl) {
        console.log('Failed to get the rendering context for WebGL');
        return;
    }
    gl.viewport(0, 0, canvas.width, canvas.height);
    gl.clearColor(1.0, 1.0, 1.0, 1.0);

    gl.enable(gl.DEPTH_TEST);

    program = initShaders(gl, "vshader", "fshader");
    gl.useProgram(program);
}

function clearCanvas() {
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
}

function setUpLighting(){
    let lightPosition = vec4(1.0, 1.0, 1.0, 0.0 );
    let lightAmbient = vec4(0.2, 0.2, 0.2, 1.0 );
    let lightDiffuse = vec4( 1.0, 1.0, 1.0, 1.0 );
    let lightSpecular = vec4( 1.0, 1.0, 1.0, 1.0 );

    let materialAmbient = vec4( 1.0, 0.0, 1.0, 1.0 );
    let materialDiffuse = vec4( 1.0, 0.8, 0.0, 1.0 );
    let materialSpecular = vec4( 1.0, 1.0, 1.0, 1.0 );
    let materialShininess = 20.0;

    let diffuseProduct = mult(lightDiffuse, materialDiffuse);
    let specularProduct = mult(lightSpecular, materialSpecular);
    let ambientProduct = mult(lightAmbient, materialAmbient);

    gl.uniform4fv(gl.getUniformLocation(program, "diffuseProduct"), flatten(diffuseProduct));
    gl.uniform4fv(gl.getUniformLocation(program, "specularProduct"), flatten(specularProduct));
    gl.uniform4fv(gl.getUniformLocation(program, "ambientProduct"), flatten(ambientProduct));
    gl.uniform4fv(gl.getUniformLocation(program, "lightPosition"), flatten(lightPosition));
    gl.uniform1f(gl.getUniformLocation(program, "shininess"), materialShininess);
}

function getModelMatrix(){
    let modelMatrix = rotateZ(0);
    modelMatrix = mult(modelMatrix, scalem(1,1,1));
    return mult(modelMatrix, translate(0,0,0));
}

function getViewMatrix() {
    let eye = vec3(0, 0, 1.5);
    let at = vec3(0.0, 0.0, 0.0);
    let up = vec3(0.0, 1.0, 0.0);
    return lookAt(eye, at, up);
}

function setUpModelViewMatrix(){
    let modelViewMatrix = mult(getViewMatrix(), getModelMatrix());
    console.log("modelViewMatrix is");
    console.log(modelViewMatrix);
    gl.uniformMatrix4fv(gl.getUniformLocation(program, "modelViewMatrix"), false, flatten(modelViewMatrix));
}

function setUpProjectionMatrix() {
    let projectionMatrix = ortho(-3, 3, -3,  3  , -10, 10);

    gl.uniformMatrix4fv(gl.getUniformLocation(program, 'projectionMatrix'), false, flatten(projectionMatrix));
}

function parseModel(model) {
    model.loadFile(model.objPath, model.objFile);
    model.faces.forEach((face) => {
        face.faceVertices.forEach((vertex) => {
            vertices.push(vertex);
        });
        face.faceNormals.forEach((normal) => {
            normals.push(normal);
        });
        face.faceTexCoords.forEach((coord) => {
            texCoords.push(coord);
        });
        material = face.material;
    });
}

function loadObject(){
    console.log(vertices);
    let vBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, flatten(vertices), gl.STATIC_DRAW);

    let vPosition = gl.getAttribLocation( program, "vPosition");
    gl.vertexAttribPointer(vPosition, 4, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vPosition);


    for( let i=0; i<vertices.length; i+=3){
        gl.drawArrays(gl.TRIANGLES, i, 3);
    }

}



